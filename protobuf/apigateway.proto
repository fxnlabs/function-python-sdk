syntax = "proto3";

package apigateway.v1;

option go_package = "function-api-gateway/gen/apigateway/v1;apigatewayv1";

// APIGatewayService defines the service for interacting with the Function AI Services.
service APIGatewayService {
  // ChatComplete sends a message and returns a completion response.
  rpc ChatComplete(ChatCompleteRequest) returns (ChatCompleteResponse);

  // ChatCompleteStream sends a message and receives a stream of completion responses.
  // The first response will contain only the role.
  // Subsequent responses will contain only the content.
  //
  // The stream will end without an error when the response is finished.
  // The stream may return an error at any time if the response fails part-way through generation.
  rpc ChatCompleteStream(ChatCompleteStreamRequest) returns (stream ChatCompleteStreamResponse);

  // Embed generates embeddings for the provided input based on the specified model.
  rpc Embed(EmbedRequest) returns (EmbedResponse);

  // TextToImage generates an image from a text prompt.
  rpc TextToImage(TextToImageRequest) returns (TextToImageResponse);

  // Transcribe transcribes an audio file.
  rpc Transcribe(TranscribeRequest) returns (TranscribeResponse);
}

// Message format commonly used for chat completion.
message ChatCompleteMessage {
  // The role of the message sender.
  string role = 1;
  // The content of the message.
  string content = 2;
}

// ChatCompleteRequest represents the request for a single chat completion.
message ChatCompleteRequest {
  // The model to use for processing the message.
  string model = 1;

  // The messages to be processed by the API.
  repeated ChatCompleteMessage message = 2;
}

// ChatCompleteResponse represents the response from the chat completion request.
message ChatCompleteResponse {
  // The completed response generated by the API.
  ChatCompleteMessage response = 1;

  // The number of tokens in the response.
  int32 token_count = 2;
}

// ChatCompleteStreamRequest represents the request for a stream of chat completions.
message ChatCompleteStreamRequest {
  // The model to use for processing the message.
  string model = 1;

  // The messages to be processed by the API.
  repeated ChatCompleteMessage message = 2;
}

// ChatCompleteStreamResponse represents the response from a stream of chat completions.
message ChatCompleteStreamResponse {
  // The completed response generated by the API.
  // Either the role or the content will be empty, but never both.
  // The first instance of a stream response will contain only the role,
  // and the subsequent ones will contain only the content.
  ChatCompleteMessage response = 1;
}

// EmbedRequest represents the request to generate embeddings for the provided input.
message EmbedRequest {
  // The model to be used for generating embeddings.
  string model = 1;

  // The input text to be embedded.
  string input = 2;
}

// EmbedResponse represents the response containing the embeddings and usage information.
message EmbedResponse {
  // Usage provides information about the token usage for the request.
  message Usage {
    // The number of tokens used in the prompt.
    int32 prompt_tokens = 1;

    // The total number of tokens used (including prompt and response).
    int32 total_tokens = 2;
  }

  // Data provides the embedding details for the request.
  message Data {
    // The type of the object returned.
    string object = 1;

    // The list of embedding values.
    repeated float embedding = 2;

    // The index of the data item in the response.
    int32 index = 3;
  }

  // The type of the object returned.
  string object = 1;

  // The list of data items containing embeddings.
  repeated Data data = 2;

  // The model used for generating the embeddings.
  string model = 3;

  // Usage details for the request.
  Usage usage = 4;
}

// ImageQuality represents possible quality levels for image generation.
enum ImageQuality {
  // Unspecified quality.
  IMAGE_QUALITY_UNSPECIFIED = 0;

  // Standard quality.
  IMAGE_QUALITY_STANDARD = 1;

  // HD quality.
  IMAGE_QUALITY_HD = 2;
}

// ImageRequest represents the request to generate an image from a text prompt.
message TextToImageRequest {
  // The model to be used for generating the image.
  string model = 1;

  // The prompt text to be used for generating the image.
  string prompt = 2;

  // The total number of images to generate.
  // Will default to 1 if not specified or 0.
  // May be subject to a limit.
  uint32 count = 3;

  // The quality of the image to generate.
  ImageQuality quality = 4;

  // The size of the image to generate.
  // The format used is "<width>x<height>", e.g. "1024x1024".
  // Will default to "1024x1024" if not specified.
  // Different sizes and aspect ratios are supported by different models.
  // Consult documentation for the model you are using for guidance.
  string size = 5;
}

// ImageResponse represents the response containing the generated image.
message TextToImageResponse {
  message Image {
    // The URL of the generated image.
    // Make a HEAD request to the URL to get metadata about the image without downloading it.
    string url = 1;

    // The Unix epoch second timestamp when the image URL will expire.
    int64 expires_ts = 2;
  }

  // All generated images.
  repeated Image images = 1;
}

// TranscribeRequest represents the request to transcribe audio.
message TranscribeRequest {
  // The model to use for transcription.
  string model = 1;

  // The URL to the audio file to transcribe.
  // Most common audio formats are supported (e.g. mp3, wav, ogg, flac).
  // The URL is expected to end with a file extension corresponding to the audio format.
  // Note that some backends may not support more than 25MB of audio data per request.
  string url = 2;
}

// TranscribeResponse represents the response from the transcription API.
message TranscribeResponse {
  message Word {
    // The word.
    string word = 1;

    // The second (including fractional part) where the word starts.
    double start_second = 2;

    // The second (including fractional part) where the word ends.
    double end_second = 3;
  }

  // The complete transcription of the audio file.
  string text = 1;

  // The number of words in the transcription.
  int32 word_count = 2;

  // All words and their timestamps in the transcription.
  repeated Word words = 3;
}
